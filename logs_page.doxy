/**
 * @page Logs 1.2
 * 
 * @section id_intro Synopsis
 * This Header-only library provides logging configurable functions that allows you to customize output format.<br/>
 * Because this is only a header, there is no need to compile anything to use this library.<br />
 * Examples are far better than words, let's get it started !
 * @section id_examples Usage
 * @subsection id_cc   How it compiles ?
 * In order to use this library, you only need a C++ standard of \b c++11 or any further !
 * @code
 * -std=c++11
 * @endcode
 * And that's all you need about compilation.<br/>
 * 
 * @subsection id_how   How it works ?
 * To begin with, you'll need to include the library from your local project source files:
 * @code
 * #include "logs.hpp"
 * @endcode
 * or even better, move the header to your local system library directory and then include it :
 * @code
 * #include <logs.hpp>
 * @endcode
 * <br />
 * You're now able to use my library :D<br /><br />
 * Fine, let's log something cool in age.<br />
 * In order to do so, you just need to call the \b log::info() statement, and precise any
 * argument you want to log, each argument separated with a coma.
 * @code
 * std::string myName = "MTLCRBN";
 * log::info("Hello world from", myName);
 * @endcode
 * Which generates this output by default:
 * @code
 * [INFO    ] : Hello world from MTLCRBN
 * @endcode
 * There are 2 others statements, for different purpose. At least, you have to choose between :
 *     - info()
 *     - warning()
 *     - error()
 * 
 * They basically do the same thing, but it changes the @b {TYPE} of your log line (see below for further
 * information).@n
 * 
 * More examples :
 * @code
 * std::string myName = "MTLCRBN";
 * log::info   ("Hello world from", myName);
 * log::error  ("Hello world from", myName, "as an error message");
 * int nbError = 5;
 * log::warning("Hello world from", myName, "with", nbError, "warnings");
 * @endcode
 * Output :
 * @code
 * [INFO    ] : Hello world from MTLCRBN
 * [ERROR   ] : Hello world from MTLCRBN as an error message
 * [WARNING ] : Hello world from MTLCRBN with 5 warnings
 * @endcode
 * <br /><br />
 * Ok, but what about the parameters I talked about earlier?<br />
 * Actually, available parameters are :
 * <table>
 * 	<tr>
 * 		<td>Parameter name</td>
 * 		<td>Legal values</td>
 * 		<td>Default value</td>
 * 		<td>Description</td>
 * 	</tr>
 * 	<tr>
 * 		<td><b>ENABLE_HORODATING</b></td>
 * 		<td><b>true</b> or <b>false</b></td>
 * 		<td>false</td>
 * 		<td>
 * 			Enable/Disable date.
 * 			@code
 * 			[WARNING, Fri Dec  2 22:00:43 2016]
 * 			@endcode
 * 			The date format is : <b>dayOfWeek month dayNumber hours:minutes:seconds year</b>
 * 		</td>
 * 	</tr>
 * 	<tr>
 * 		<td><b>ENABLE_LOG</b></td>
 * 		<td><b>true</b> or <b>false</b></td>
 * 		<td>true</td>
 * 		<td>Enable/Disable logs for further calls of info(), warning(), error()</td>
 * 	</tr>
 * 	<tr>
 * 		<td><b>ENABLE_SPACING</b></td>
 * 		<td><b>true</b> or <b>false</b></td>
 * 		<td>true</td>
 * 		<td>if set to \b true, it will add an extra space between each argument</td>
 * 	</tr>
 * 	<tr>
 * 		<td><b>ENABLE_COLOR</b></td>
 * 		<td><b>true</b> or <b>false</b></td>
 * 		<td>false</td>
 * 		<td>
 * 			activates \b xterm color codes for in between braces text.<br />
 * 			It may not be use for log dumping, in order to prevent further troubles when parsing files.<br />
 * 			It may not work with other terminals, carry on.
 * 		</td>
 * 	</tr>
 *  <tr>
 * 		<td><b>ALPHA_BOOL</b></td>
 * 		<td><b>true</b> or <b>false</b></td>
 * 		<td>true</td>
 * 		<td>This parameter allows you to display @b "true" instead of @b "1" when you display a @b bool with log functions.</td>
 * 	</tr>
 * 	<tr>
 * 		<td><b>OUT</b></td>
 * 		<td>Any valid std::ostream address (<b>std::ostream*</b>)</td>
 * 		<td>&std::cout</td>
 * 		<td>Sets which std::ostream you'll use to log.</td>
 * 	</tr>
 * 	<tr>
 *    <td><b>FORMAT</b></td>
 *    <td>Any std::string, with tags {TYPE} (where to display the log type) and {DATE} (where to display the date)</td>
 * 		<td>[{TYPE} {DATE}] :</td>
 * 		<td>Sets the output line format for your log line.</td>
 * 	</tr>
 * </table>
 * They are grouped and accessible in the @b logs::Options class. Accessing this class allows you to set their values and then customize your output.
 * Example :
 * @code
 * log::Options::ENABLE_LOG = true;  // Enable  logs for further calls of info(), warning(), error().
 * log::Options::ENABLE_LOG = false; // Disable logs for further calls of info(), warning(), error().
 * // log::Options::ENABLE_... = value;
 * @endcode
 * @b OUT parameter is a bit more complicated. It defines the \b std::ostream where the log should be dumped<br/>
 * It can be changed by giving the address of any \b valid std::ostream, of any types :
 * @code
 * log::Options::OUT = &std::cerr; // To log on stderr
 * std::ostringstream os;
 * log::Options::OUT = &os; // Carry on with destructors, scoped variables, etc.
 * std::ofstream myFile("mylogfile.log");
 * log::Options::OUT = &myFile; // To log onto a file.
 * @endcode
 * Changing this parameter is up to you, any misbehavior is on your own responsability.
 * @subsection id_hold Hold on a second !
 * But MTLCRBN, that's fine for me, but I'm use to display a message to indicate I'm starting some huge work, and then indicate
 * a "OK" message at the end if everything goes well, like this :
 * @code
 * std::cout << "Starting parsing this huge gigantic file ... " << std::flush;
 * // Atrocious stuff, it takes forever.
 * std::cout << "OK" << std::endl;
 * @endcode
 * For an output which looks like this :
 * @code
 * Starting parsing this huge gigantic file ... OK
 * @endcode 
 * But, with your library, I'm oblige to print 2 lines instead of one, that's crap !
 * 
 * 
 * Let's correct this, it WAS crap.<br />
 * This is possible to accomplish this task with my library since the 1.2 version.<br />
 * You just need to tell at my library : "wait a minut, something else incoming later". You can do that with the 
 * hold_on() statement.
 * @code
 * log::info("This is the answer to the big question =>", mtl::log::hold_on());
 * // Some years later
 * log::info("42");
 * @endcode
 * It will produce what you expect :
 * @code
 * [INFO] : This is the answer to the big question =>  42
 * @endcode
 * 
 * It's important to know somethings about this method :
 *    - It will wait for the next call to the \b same log method.
 *      If you call info() for example, and then error(), the next info("with_answer") will be cancel.
 *    - Ensure that there isn't any other info() during the treatment !
 * 
 * By the way, you could put the hold_on() statement where you want on the arguments.
 * @code
 * :log::info(log::hold_on(), "whatever"); // It will work
 * @endcode
 * 
 * @subsection id_config Out of source configuration
 * Ah, it looks pretty good, easy to use. But, one problem is still there, we're oblige to 
 * compile our code in order to change some parameters !@n
 * Let's suppose I work on a big gigantic project with you library, and I want to turn off
 * the logs, I'm oblige to recompile the file which sets @b ENABLE_LOG and make sure it disable it everywhere !
 * 
 * That's why you could, at the very beginning of your program, use a configuration file :
 * @code
 * int main(...)
 * {
 *    log::loadConfiguration("myfile.conf");
 *    ...
 *    return 0;
 * }
 * @endcode
 * If myfile.conf doesn't exist, my library will create it and fill it with default values.@n
 * As usual, it will not deal with absolute path or anything like that.
 * So let's take a look to this file :
 * @code
 * enable_log = 1
 * enable_color = 0
 * enable_horodating = 0
 * enable_spacing = 1
 * alpha_bool = 0
 * format =[{TYPE} {DATE}] : 
 * 
 * # This will not be parsed.
 * # format value have to be like this :
 * # "format =" is just the lvalue. Right after the sequence you wanna display starts.
 * # Inside the sequence, you could use {TYPE} to display the logging type.
 * #                                    {DATE} to display the horodating.
 * # Spaces count.
 * # IMPORTANT Do not change line order !
 * @endcode
 * Here you could easily change some values to configure the output without recompile anything !@n
 * 0 ---> false
 * 1 ---> true
 * 
 * You canno't change the @b OUT value with this file because @b logs doesn't dispose of any file at the end, you'll
 * have to do it by yourself.@n
 * 
 * @b {TYPE} and @b {DATE} are'nt required for the format value, here some example.
 * @code
 * format =<{TYPE} {DATE}>:
 * format =\\{TYPE}//
 * @endcode
 * 
 * @subsection id_sum   Summary
 * There is a full code to demonstrate the usage :
 * @code
 * #include "logs.hpp"
 * #include <string>
 * #include <iostream>
 * 
 * 
 * int main(int argc, char** argv)
 * {
 *  	log::Options::ENABLE_COLOR      = true;       // We do have an xterm, so let's turn on colors.
 *  	log::Options::ENABLE_SPACING    = false;      // Let us deal with spacing between each argument.
 *  	log::Options::ENABLE_HORODATING = true;       // We do want dates to appear.
 *  	log::Options::OUT               = &std::cerr; // let's log on std::cerr, because why not.
 *  	
 *  	log::info("Hello world !");
 *  	
 *  	std::string swear = "Because you must do it !";
 *  	if (argc == 1)
 *  		log::error("You forgot to provide arguments, ", swear);
 *  	
 *  	int maxLogs = 15000;
 *  	log::Options::ENABLE_SPACING = true;
 *  	log::warning("Heavy logs incoming.", maxLogs, "messages on sight !");
 *  	
 *  	log::Options::ENABLE_LOG = false; // Fiou, we'll avoid those tons of useless logs.
 *  	for(int i=0;i<maxLogs;++i)
 *  		log::info("This is line number", i);
 *      log::Options::ENABLE_LOG = true;
 *      log::info("Let's count to 5 -->", log::hold_on());
 *      for(int i=1;i<6;i++)
 *          log::info(log::hold_on(), i);
 *      log::info("--> Done :D");
 *      log::info(true, false);
 *      log::Options::ALPHA_BOOL = true;
 *      log::info(true, false);
 *  	return 0;
 * }
 * @endcode
 * And the mighty output is :
 * 
 * [<b style="color:green">INFO</b>   , Fri Dec  2 22:28:41 2016] : Hello world !<br />
 * [<b style="color:red">ERROR</b>  , Fri Dec  2 22:28:41 2016] : You forgot to provide arguments, Because you must do it !<br />
 * [<b style="color:yellow">WARNING</b>, Fri Dec  2 22:28:41 2016] :  Heavy logs incoming. 15000 messages on sight !<br />
 * [<b style="color:green">INFO</b>   , Fri Dec  2 22:28:41 2016] : Let's count to 5 --> 1 2 3 4 5 --> Done :D
 * [<b style="color:green">INFO</b>   , Fri Dec  2 22:28:41 2016] : 1 0
 * [<b style="color:green">INFO</b>   , Fri Dec  2 22:28:41 2016] : true false
 *
 * 
 * @section id_doc      Documentation
 * The documentation is build with Doxygen.
 * @section id_license  License
 * This "software" is provided without any express or implied warranty.<br />
 * In no event will the author be held liable for any damages arising from the use of this "software".<br />
 * Anyway, feel free to enhance or modify it as you please, this is not my business anymore.
 * @section id_author Author & contributor(s)
 * <b>MTLCRBN</b><br />
 * <b>Zelnes</b>, for the english check of this documentation (thanks buddy), and for some ideas.
 */
